Git Away! A guide to not messing with my git branches.

pre-commit
    

commit-msg
    It checks the git commit message.
    
    The commit message is read-write in '$1'

pre-commit
    Called by git commit. It looks at files, not the message
    No cloe how to use it. Somthing about git rev-parse

pre-push
    Called before git push. $1 is the remote $2 is the URL
    Commits are passed through the standard input.
    <local ref> <local oid??> <remote ref> <remote oid??>
    Type this line:
    zero=$(git hash-object --stdin</dev/null|tr '[0-9a-f]' '0')
    and then this:
    while read local_ref local_oid remote_ref remote_oid do
    
    if $local_oid is $zero then "handle delete"??
    if $remote_oid is $zero then we are creating a new branch.

pre-rebase
    $1 is the upstream where its forked from
    $2 is the branch being rebased (Empty if current branch)

pre-receive
    Put this hook on the remote server.
    Called on the SERVER when the CLIENT runs git push.
    It has these variables:
    $GIT_PUSH_OPTION_COUNT
    and then
    $GIT_PUSH_OPTION_0
    $GIT_PUSH_OPTION_1
    $GIT_PUSH_OPTION_2
    ....
    It receves this on stdin (About updating refs):
    <old-value> <new-value> <ref-name>
    
    Exit 1 will block all changes. Exit 0 will
    call the update hook wich can allow or deny individual refs.

update
    Executes once for each ref.
    
    $1 - Name of the ref
    $2 - Old object in the ref
    $3 - New object to be stored
    
    
